"use client";
import { Program, AnchorProvider, setProvider, Wallet } from "@coral-xyz/anchor";
import { useConnection, useWallet, useAnchorWallet } from "@solana/wallet-adapter-react";
import { Connection, Keypair, PublicKey, SystemProgram } from '@solana/web3.js';
import idl from '@/../vote/target/idl/vote.json';
import type { Vote } from '@/../vote/target/types/vote';
import { Button } from "antd";
import { useEffect, useState } from "react";

export default function Page() {
	const PROGRAM_ID = new PublicKey("J7GcJ4qmKtj1KD8N56pPUtDuV3Njm5DEXhe92tXhbKzM");
	const { connection } = useConnection();
	const [ poll, setPoll ] = useState<any>(null);
	const wallet = useAnchorWallet();
	if (!wallet) return null;
	const provider = new AnchorProvider(connection, wallet, {
		commitment: "confirmed",
	  });
	setProvider(provider);
	 const program = new Program(idl as Vote, provider);

	const initializeAccount = async () => {
		const [pollPDA] = await PublicKey.findProgramAddress(
			[Buffer.from("poll"), Buffer.from("Fesse")], 
			program.programId
		);
		console.log("pollPDA:", pollPDA.toString());
		const transaction = await program.methods
			.createPoll("Fesse", "caca")
			.accountsStrict({
				poll: pollPDA,
				signer: wallet.publicKey,
				systemProgram: SystemProgram.programId, // Notez systemProgram en camelCase
			})
			.rpc();
		console.log(`Transaction signature: ${transaction}`);
		console.log(`Compte initialisÃ© avec l'adresse: ${pollPDA}`);
	};

	const fetchData = async () => {
		const data = await program.account.poll.all();
		setPoll(data);
		console.log(poll);
	};
	  
	const pollPrint = () => {
		return (poll ? poll.map((p: any) => {
			return (
				<div key={p.publicKey.toString()} className="border p-4 my-4">
					<h1>Name: {p.account.pollName}</h1>
					<p>Description: {p.account.pollDescription}</p>
					<p>Against: {p.account.against}</p>
					<p>For: {p.account.for}</p>
					<p>Candidate Amount: {p.account.candidateAmount}</p>
					<p>Address: {p.publicKey.toString()}</p>
				</div>
			)
		}) : "Vide")
	};
  return (
	<div>
	  <h1>Test</h1>
	  <p>Generated by create-solana-dapp</p>
	  {poll ? pollPrint() : "Vide"}
	  <Button onClick={initializeAccount}>Initialize Account</Button>
	  <Button onClick={fetchData}>Fetch Data</Button>
	</div>
  );
}