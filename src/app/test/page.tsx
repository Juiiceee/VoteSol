"use client";
import { Program, AnchorProvider, setProvider } from "@coral-xyz/anchor";
import { useConnection, useAnchorWallet } from "@solana/wallet-adapter-react";
import { PublicKey, SystemProgram } from '@solana/web3.js';
import idl from '@/../vote/target/idl/vote.json';
import type { Vote } from '@/../vote/target/types/vote';
import { Button, Input  } from "antd";
import { useState } from "react";

export default function Page() {
	const { connection } = useConnection();
	const [poll, setPoll] = useState<any>(null);
	const [name, setName] = useState<string>("");
	const [description, setDescription] = useState<string>("");
	const wallet = useAnchorWallet();
	if (!wallet) return null;
	const provider = new AnchorProvider(connection, wallet, {
		commitment: "confirmed",
	});
	setProvider(provider);
	const program = new Program(idl as Vote, provider);

	const initializeAccount = async () => {
		const [pollPDA] = await PublicKey.findProgramAddress(
			[Buffer.from("poll"), Buffer.from(name)],
			program.programId
		);
		console.log("pollPDA:", pollPDA.toString());
		const transaction = await program.methods
			.createPoll(name, description)
			.accountsStrict({
				poll: pollPDA,
				signer: wallet.publicKey,
				systemProgram: SystemProgram.programId, // Notez systemProgram en camelCase
			})
			.rpc();
		console.log(`Transaction signature: ${transaction}`);
		console.log(`Compte initialisé avec l'adresse: ${pollPDA}`);
	};

	const fetchData = async () => {
		const data = await program.account.poll.all();
		setPoll(data);
		console.log(poll);
	};

	const VoteCandidate = async (p: any, choose: boolean) => {
		const [pollPDA] = await PublicKey.findProgramAddress(
			[Buffer.from("poll"), Buffer.from(p.account.pollName)],
			program.programId
		);
		const [candidatePDA] = await PublicKey.findProgramAddress(
			[Buffer.from("candidate"), pollPDA.toBuffer(), wallet.publicKey.toBuffer()],
			program.programId
		);
		console.log("candidatePDA:", candidatePDA.toString());
		const transaction = await program.methods
			.votePoll(choose)
			.accountsStrict({
				poll: pollPDA,
				candidate: candidatePDA,
				signer: wallet.publicKey,
				systemProgram: SystemProgram.programId, // Notez systemProgram en camelCase
			})
			.rpc();
		console.log(`Transaction signature: ${transaction}`);
		console.log(`Compte initialisé avec l'adresse: ${candidatePDA}`);
	};

	const pollPrint = () => {
		return (poll ? poll.map((p: any) => {
			return (
				<div key={p.publicKey.toString()} className="border p-4 my-4">
					<h1>Name: {p.account.pollName}</h1>
					<p>Description: {p.account.pollDescription}</p>
					<p>Against: {p.account.against}</p>
					<p>For: {p.account.for}</p>
					<p>Candidate Amount: {p.account.candidateAmount}</p>
					<p>Address: {p.publicKey.toString()}</p>
					<div className="flex justify-center mt-4">
						<Button className="mr-4" onClick={() => VoteCandidate(p, true)}> Vote for</Button>
						<Button onClick={() => VoteCandidate(p, false)}> Vote against</Button>
					</div>
				</div>
			)
		}) : "Vide")
	};
	return (
		<div>
			<h1>Test</h1>
			<p>Generated by create-solana-dapp</p>
			{poll ? pollPrint() : "Vide"}
			<div className="flex justify-center mt-4 border-2 py-4">
				<div>
					<Button className="flex justify-center" onClick={initializeAccount}>Initialize Account</Button>
					<div>
						<Input style={{ width: '50%' }} placeholder="Name" onChange={(e)=> setName(e.target.value)}/>
						<Input style={{ width: '50%' }} placeholder="Description" onChange={(e)=> setDescription(e.target.value)}/>
					</div>
				</div>
				<Button onClick={fetchData}>Fetch Data</Button>
			</div>
		</div>
	);
}